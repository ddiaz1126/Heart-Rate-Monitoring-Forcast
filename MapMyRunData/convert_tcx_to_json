import os
import xml.etree.ElementTree as ET
import pandas as pd

# Define the input and output directories
input_folder = '/Users/daviddiaz/Desktop/Main/Heart-Rate-Monitoring-Forecast/MapMyRunData/original_exercises_tcx_files'  # Folder containing your TCX files
output_folder = '/Users/daviddiaz/Desktop/Main/Heart-Rate-Monitoring-Forecast/MapMyRunData/parsed_json_file'  # Folder to save the JSON files

# Create the output folder if it doesn't exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Function to process each TCX file and save as JSON
def process_tcx_file(tcx_file):
    tree = ET.parse(tcx_file)
    root = tree.getroot()

    # Define the XML namespace
    namespace = {'ns': 'http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2'}

    # Extract activity data
    activity = root.find('.//ns:Activity', namespace)
    activity_sport = activity.attrib['Sport']
    activity_id = activity.find('ns:Id', namespace).text

    # Extract lap data
    lap = activity.find('ns:Lap', namespace)
    lap_start_time = lap.attrib['StartTime']
    lap_total_time_seconds = lap.find('ns:TotalTimeSeconds', namespace).text
    lap_distance_meters = lap.find('ns:DistanceMeters', namespace).text

    # Extract trackpoint data (GPS and time)
    trackpoints = lap.find('ns:Track', namespace).findall('ns:Trackpoint', namespace)

    # Loop through the trackpoints to extract time, position, altitude, and distance
    track_data = []
    for trackpoint in trackpoints:
        time = trackpoint.find('ns:Time', namespace).text
        position = trackpoint.find('ns:Position', namespace)
        if position is not None:
            latitude = position.find('ns:LatitudeDegrees', namespace).text
            longitude = position.find('ns:LongitudeDegrees', namespace).text
        else:
            latitude, longitude = None, None
        
        # Handle missing altitude or distance
        altitude = trackpoint.find('ns:AltitudeMeters', namespace)
        if altitude is not None:
            altitude = altitude.text
        else:
            altitude = None
        
        distance = trackpoint.find('ns:DistanceMeters', namespace)
        if distance is not None:
            distance = distance.text
        else:
            distance = None
        
        # Append the trackpoint data to the list
        track_data.append({
            'time': time,
            'latitude': latitude,
            'longitude': longitude,
            'altitude': altitude,
            'distance': distance
        })

    # Create a DataFrame from the track_data list
    df = pd.DataFrame(track_data)

    # Add additional activity and lap data to the DataFrame
    df['activity_sport'] = activity_sport
    df['activity_id'] = activity_id
    df['lap_start_time'] = lap_start_time
    df['lap_total_time_seconds'] = lap_total_time_seconds
    df['lap_distance_meters'] = lap_distance_meters

    # Convert 'time' column to datetime
    df['time'] = pd.to_datetime(df['time'], errors='coerce', utc=True)
    df['date'] = df['time'].dt.date

    # Define the output file name based on the date of the first entry in the 'date' column
    date_value = df['date'][0]
    output_file = os.path.join(output_folder, f'{date_value}.json')

    # Save the DataFrame as a JSON file
    df.to_json(output_file, orient='records', lines=True)

# Iterate over all .tcx files in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith('.tcx'):  # Only process .tcx files
        tcx_file = os.path.join(input_folder, filename)
        process_tcx_file(tcx_file)

print("TCX files processed and saved as JSON.")